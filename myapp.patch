diff --git a/pom.xml b/pom.xml
index baf532d..831853a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -43,6 +43,11 @@
 			<groupId>org.projectlombok</groupId>
 			<artifactId>lombok</artifactId>
 		</dependency>
+		<dependency>
+			<groupId>com.h2database</groupId>
+			<artifactId>h2</artifactId>
+			<version>2.1.214</version>
+		</dependency>
 	</dependencies>
 
 	<build>
@@ -51,7 +56,50 @@
 				<groupId>org.springframework.boot</groupId>
 				<artifactId>spring-boot-maven-plugin</artifactId>
 			</plugin>
+			<plugin>
+				<groupId>org.flywaydb</groupId>
+				<artifactId>flyway-maven-plugin</artifactId>
+				<version>9.8.1</version>
+				<dependencies>
+					<dependency>
+						<groupId>com.h2database</groupId>
+						<artifactId>h2</artifactId>
+						<version>2.1.214</version>
+					</dependency>
+				</dependencies>
+				<executions>
+					<execution>
+						<id>restaurant-flyway-clean</id>
+						<phase>clean</phase>
+						<goals>
+							<goal>clean</goal>
+						</goals>
+						<configuration>
+							<driver>org.h2.Driver</driver>
+							<url>jdbc:h2:file:./target/restaurant;MODE=MYSQL;AUTO_SERVER=TRUE</url>
+							<user>sa</user>
+							<password/>
+							<cleanDisabled>false</cleanDisabled>
+						</configuration>
+					</execution>
+					<execution>
+						<id>restaurant-flyway-migrate</id>
+						<phase>generate-test-resources</phase>
+						<goals>
+							<goal>migrate</goal>
+						</goals>
+						<configuration>
+							<driver>org.h2.Driver</driver>
+							<url>jdbc:h2:file:./target/restaurant;MODE=MYSQL;AUTO_SERVER=TRUE</url>
+							<user>sa</user>
+							<password/>
+							<locations>
+								<location>filesystem:${project.basedir}/src/test/resources/db/migrations</location>
+							</locations>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
 		</plugins>
 	</build>
-
 </project>
diff --git a/src/main/java/com/myapp/RestaurantWebApplication.java b/src/main/java/com/myapp/RestaurantWebApplication.java
index 76f3816..dfad86c 100644
--- a/src/main/java/com/myapp/RestaurantWebApplication.java
+++ b/src/main/java/com/myapp/RestaurantWebApplication.java
@@ -5,10 +5,10 @@ import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-public class SpringbootWebDataStoreApplication implements CommandLineRunner {
+public class RestaurantWebApplication implements CommandLineRunner {
 
 	public static void main(String[] args) {
-		SpringApplication.run(SpringbootWebDataStoreApplication.class, args);
+		SpringApplication.run(RestaurantWebApplication.class, args);
 	}
 
 	@Override
diff --git a/src/main/java/com/myapp/controller/UserController.java b/src/main/java/com/myapp/controller/UserController.java
index f36f253..25d4e71 100644
--- a/src/main/java/com/myapp/controller/UserController.java
+++ b/src/main/java/com/myapp/controller/UserController.java
@@ -1,14 +1,26 @@
-package com.webdatastore.springbootwebdatastore.controller;
+package com.myapp.controller;
 
-import com.webdatastore.springbootwebdatastore.exception.ResourceNotFoundException;
-import com.webdatastore.springbootwebdatastore.model.User;
-import com.webdatastore.springbootwebdatastore.repository.UserRepository;
+import com.myapp.exception.ResourceNotFoundException;
+import com.myapp.model.Credentials;
+import com.myapp.model.Token;
+import com.myapp.model.User;
+import com.myapp.service.UserService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
+import org.springframework.web.bind.annotation.CrossOrigin;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
 
 import java.util.List;
+import java.util.Optional;
 
 @CrossOrigin("*")
 @RestController
@@ -16,53 +28,59 @@ import java.util.List;
 public class UserController {
 
     @Autowired
-    private UserRepository userRepository;
+    private UserService userService;
 
     @GetMapping
-    public List<User> getAllUsers() {
-        return userRepository.findAll();
+    public List<User> getAllUsers(@RequestParam String username) {
+        return userService.getUsers(username);
     }
 
-    //build create user REST API
     @PostMapping
     public User createUser(@RequestBody User user) {
-    return userRepository.save(user);
+    return userService.createUser(user);
     }
 
-    //build get user with email by REST API
-    @GetMapping("{email}")
-    public ResponseEntity<User> getUserByName(@PathVariable String email) {
-        User user = userRepository.findByEmail(email);
-                //orElseThrow(() -> new ResourceNotFoundException("User not exist with:" +userName));
-                //not throwing exception here needs to be fixed
+    @GetMapping("/{userId}")
+    public ResponseEntity<User> getUser(@PathVariable String userId) {
+        Optional<User> userEntity = userService.getUser(userId);
+        User user = userEntity.orElseThrow(() -> new ResourceNotFoundException("User with user_id " + userId + "doesn't exist"));
         return ResponseEntity.ok(user);
     }
 
-    //build update User REST API
-    @PutMapping("{email}")
-    public ResponseEntity<User> updateUser(@PathVariable String email, @RequestBody User userDetails) {
-        User updateUserDetails = userRepository.findByEmail(email);
-        //.orElseThrow(() -> new ResourceNotFoundException("User doesn't exist with " +email));
+    @PutMapping("/{userId}")
+    public ResponseEntity<User> updateUser(@PathVariable String userId, @RequestBody User user) {
+        User currentUser = userService.getUser(userId).orElseThrow(() ->
+                new ResourceNotFoundException("User with user_id " + userId + "doesn't exist"));
+        User updatedUser = userService.updateUser(currentUser, user);
 
-        updateUserDetails.setUserName(userDetails.getUserName());
-        updateUserDetails.setPhoneNumber(userDetails.getPhoneNumber());
-        updateUserDetails.setPassword(userDetails.getPassword());
-        updateUserDetails.setAdmin(userDetails.isAdmin());
-
-        userRepository.save(updateUserDetails);
-
-        return ResponseEntity.ok(updateUserDetails);
+        return ResponseEntity.ok(updatedUser);
     }
 
-    //build delete User REST API
-    @DeleteMapping("{email}")
-    public ResponseEntity<User> delete(@PathVariable String email) {
-
-        User user = userRepository.findByEmail(email);
-        //.orElseThrow(() -> new ResourceNotFoundException("User doesn't exist with " +email));
-
-        userRepository.delete(user);
+    @DeleteMapping("/{userId}")
+    public ResponseEntity<User> delete(@PathVariable String userId) {
+        User user = userService.getUser(userId).orElseThrow(() ->
+                new ResourceNotFoundException("User with user_id " + userId + "doesn't exist"));
+        userService.deleteUser(user);
 
         return new ResponseEntity<>(HttpStatus.NO_CONTENT);
     }
+
+    @PostMapping("/authenticate")
+    public ResponseEntity<Token> createToken(Credentials credentials) {
+        List<User> users = userService.getUsers(credentials.getUsername());
+        User user;
+        if (users.isEmpty() || users.size() > 1) {
+            // Throw invalid credentials exception
+            return null; // remove this after implementing exception
+        } else {
+            user = users.get(0);
+        }
+        boolean credentialsValidated = userService.validateCredentials(credentials, user);
+        if (!credentialsValidated) {
+            // Throw invalid credentials exception
+            return null; // remove this after implementing exception
+        }
+        Token token = userService.generateToken(user);
+        return new ResponseEntity<Token>(token, HttpStatus.CREATED);
+    }
 }
diff --git a/src/main/java/com/myapp/exception/ResourceNotFoundException.java b/src/main/java/com/myapp/exception/ResourceNotFoundException.java
index 9879e97..3c7a8d3 100644
--- a/src/main/java/com/myapp/exception/ResourceNotFoundException.java
+++ b/src/main/java/com/myapp/exception/ResourceNotFoundException.java
@@ -1,4 +1,4 @@
-package com.webdatastore.springbootwebdatastore.exception;
+package com.myapp.exception;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.ResponseStatus;
diff --git a/src/main/java/com/myapp/model/Token.java b/src/main/java/com/myapp/model/Token.java
index 00a0e3d..22749f9 100644
--- a/src/main/java/com/myapp/model/Token.java
+++ b/src/main/java/com/myapp/model/Token.java
@@ -1,4 +1,4 @@
-package com.webdatastore.springbootwebdatastore.model;
+package com.myapp.model;
 
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
diff --git a/src/main/java/com/myapp/model/User.java b/src/main/java/com/myapp/model/User.java
index 8cc6ed7..04895ff 100644
--- a/src/main/java/com/myapp/model/User.java
+++ b/src/main/java/com/myapp/model/User.java
@@ -1,4 +1,4 @@
-package com.webdatastore.springbootwebdatastore.model;
+package com.myapp.model;
 
 import jakarta.persistence.*;
 import lombok.*;
@@ -12,27 +12,26 @@ import java.util.List;
 @Entity
 @Table(name = "users")
 public class User {
-
-    public String getUserName() {
-        return userName;
-    }
-
-    public void setUserName(String userName) {
-        this.userName = userName;
-    }
-
+    @Id
+    @GeneratedValue(generator = "UUID")
+    private String userId;
     @Column(name = "user_name, nullable")
     private String userName;
     @Column(name = "email_id")
     private String email;
     @Column(name = "phoneNumber")
     private String phoneNumber;
-    @Id
-    @GeneratedValue(generator = "UUID")
-    private java.util.UUID userId;
-    private String password;
+    private char[] password;
     @Column(name = "isAdmin")
     private boolean isAdmin;
     @OneToMany(mappedBy = "user")
     private List<Token> userTokens;
+
+    public String getUserName() {
+        return userName;
+    }
+
+    public void setUserName(String userName) {
+        this.userName = userName;
+    }
 }
diff --git a/src/main/java/com/myapp/repository/TokenRepository.java b/src/main/java/com/myapp/repository/TokenRepository.java
index 07eaedd..4a9fe1d 100644
--- a/src/main/java/com/myapp/repository/TokenRepository.java
+++ b/src/main/java/com/myapp/repository/TokenRepository.java
@@ -1,8 +1,8 @@
-package com.webdatastore.springbootwebdatastore.repository;
+package com.myapp.repository;
 
-import com.webdatastore.springbootwebdatastore.model.Token;
+import com.myapp.model.Token;
 import org.springframework.data.jpa.repository.JpaRepository;
 
 public interface TokenRepository extends JpaRepository<Token, Long> {
-
+    public Token findByToken(String token);
 }
diff --git a/src/main/java/com/myapp/repository/UserRepository.java b/src/main/java/com/myapp/repository/UserRepository.java
index 410b0c8..c8939b5 100644
--- a/src/main/java/com/myapp/repository/UserRepository.java
+++ b/src/main/java/com/myapp/repository/UserRepository.java
@@ -1,9 +1,11 @@
-package com.webdatastore.springbootwebdatastore.repository;
+package com.myapp.repository;
 
-import com.webdatastore.springbootwebdatastore.model.User;
+import com.myapp.model.User;
 import org.springframework.data.jpa.repository.JpaRepository;
 
-public interface UserRepository extends JpaRepository<User, Long> {
-    User findByEmail(String email);
-    //all crud database methods
+public interface UserRepository extends JpaRepository<User, String> {
+
+    public User findByEmail(String email);
+
+    public User findByUserName(String userName);
 }
diff --git a/src/main/java/com/myapp/service/UserService.java b/src/main/java/com/myapp/service/UserService.java
index db95836..f904ac1 100644
--- a/src/main/java/com/myapp/service/UserService.java
+++ b/src/main/java/com/myapp/service/UserService.java
@@ -1,6 +1,67 @@
 package com.myapp.service;
 
+import com.myapp.mapper.UserMapper;
+import com.myapp.model.Credentials;
+import com.myapp.model.Token;
+import com.myapp.model.User;
+import com.myapp.repository.TokenRepository;
+import com.myapp.repository.UserRepository;
+import com.myapp.utils.TokenHelper;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.*;
+
+@Service
 public class UserService {
 
+    @Autowired
+    private UserRepository userRepository;
+
+    @Autowired
+    private TokenRepository tokenRepository;
+
+    @Autowired
+    private UserMapper userMapper;
+
+    private int DEFAULT_TOKEN_VALIDITY_HOURS = 6;
+
+    public List<User> getUsers(String username) {
+        return username == null ? userRepository.findAll() :
+                Collections.singletonList(userRepository.findByUserName(username));
+    }
+
+    public User createUser(User user) {
+        return userRepository.saveAndFlush(user);
+    }
+
+    public Optional<User> getUser(String userId) {
+        return userRepository.findById(userId);
+    }
+
+    public User updateUser(User existingUser, User updatedUser) {
+        if (!existingUser.getUserId().equals(updatedUser.getUserId())) {
+            // Throw bad request exception after configuring exception handling
+        }
+        userMapper.copyUserForUpdate(updatedUser, existingUser);
+        return userRepository.saveAndFlush(existingUser);
+    }
+
+    public void deleteUser(User user) {
+        userRepository.delete(user);
+    }
+
+    public boolean validateCredentials(Credentials credentials, User user) {
+        // Below is sample code
+        return user.getUserName().equals(credentials.getUsername()) &&
+                Arrays.equals(user.getPassword(), credentials.getPassword());
+    }
 
+    public Token generateToken(User user) {
+        Calendar calendar = Calendar.getInstance();
+        calendar.add(Calendar.HOUR, DEFAULT_TOKEN_VALIDITY_HOURS);
+        Token token = TokenHelper.generateNewToken(user, calendar.getTimeInMillis());
+        tokenRepository.saveAndFlush(token);
+        return token;
+    }
 }
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index 4456d25..80f9093 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,6 +1,6 @@
-spring.datasource.url=jdbc:mysql://localhost:3306/user?useSSL=TRUE
-spring.datasource.username=root
-spring.datasource.password=12345678
+spring.datasource.url=jdbc:h2:file:./target/restaurant;MODE=MYSQL;AUTO_SERVER=TRUE
+spring.datasource.username=sa
+spring.datasource.password=
 
 spring.jpa.properties.hibernate.dialect =org.hibernate.dialect.MySQL5Dialect
 
diff --git a/src/test/java/com/myapp/RestaurantWebApplicationTests.java b/src/test/java/com/myapp/RestaurantWebApplicationTests.java
index 84c5de6..43d2ed5 100644
--- a/src/test/java/com/myapp/RestaurantWebApplicationTests.java
+++ b/src/test/java/com/myapp/RestaurantWebApplicationTests.java
@@ -4,7 +4,7 @@ import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-class SpringbootWebDataStoreApplicationTests {
+class RestaurantWebApplicationTests {
 
 	@Test
 	void contextLoads() {
